{
  "title": "تقييم أداء REST و GraphQL و gRPC",
  "research": {
    "title": "تحليل مقارن لأداء REST و GraphQL و gRPC",
    "subtitle": "في بنية اتصال الخدمات المصغرة",
    "badges": {
      "readTime": "15 دقيقة قراءة",
      "performanceStudy": "دراسة الأداء",
      "microservices": "الخدمات المصغرة",
      "buyMeCoffee": "اشترِ لي قهوة"
    },
    "summary": {
      "fastestResponseTime": "أسرع زمن استجابة",
      "gRPC": "gRPC",
      "gRPCRange": "233 ملليثانية - 2.6 ثانية (بيانات مسطحة)",
      "lowestCPUUsage": "أدنى استخدام CPU",
      "REST": "REST",
      "RESTRange": "10٪ - 49٪ (بيانات مسطحة)",
      "highestResourceUsage": "أعلى استهلاك موارد",
      "GraphQL": "GraphQL",
      "GraphQLRange": "120٪ - 177٪ CPU"
    },
    "overview": {
      "title": "نظرة عامة",
      "content": "تعتمد الأنظمة الموزعة الحديثة بشكل متزايد على بنية الخدمات المصغرة كنهج أساسي لبناء تطبيقات قوية وقابلة للصيانة. يلعب اختيار بروتوكول الاتصال بين الخدمات المصغرة دوراً حاسماً في كفاءة النظام. تفحص هذه الدراسة الأداء المقارن لثلاث طرق اتصالية شائعة: REST و GraphQL و gRPC في بيئات الخدمات المصغرة. يتكون إطار العمل التجريبي من ثلاث خدمات مصغرة في حاويات، كل منها مزود بـ Redis و MySQL. ركزنا على قياسين أساسيين: زمن الاستجابة واستخدام المعالج. اختبرنا استرجاع البيانات المسطحة البسيطة والبيانات المعقدة المتداخلة، بتحميل يتراوح بين 100 و500 طلب متزامن. أظهرت النتائج تفوق gRPC في زمن الاستجابة، وحصول REST على أداء متوسط، بينما سجل GraphQL أعلى زمن استجابة واستخدام CPU أكبر مقارنةً بـ gRPC و REST. توفر هذه النتائج إرشادات مهمة لمهندسي الأنظمة والمطورين عند اختيار بروتوكولات التواصل."
    },
    "background": {
      "title": "الخلفية والدافع",
      "paragraph1": "اعتمدت هندسة البرمجيات بنية الخدمات المصغرة كنهج تحولي لتصميم التطبيقات. يشجع هذا النموذج على تقسيم التطبيقات الأحادية إلى خدمات أصغر ومستقلة، يمكن تطويرها ونشرها وتوسيعها بشكل منفصل دون تأثير على بقية النظام. يُمكّن ذلك فرق التطوير من التركيز على مجالات محددة، مما يعزز القابلية للتوسع ويُسرّع دورات التطوير ويحسّن تحمل الأخطاء.",
      "paragraph2": "برزت في منظومات الخدمات المصغرة بروتوكولات رئيسية للتواصل: REST و GraphQL. يُعد REST منهجية شائعة لتبادل البيانات عبر نقاط نهاية متعددة، لكنه يعاني من الإفراط أو النقص في محتوى الاستجابة أحياناً. عالج GraphQL هذه المشكلة بتمكين العملاء من تحديد البيانات المطلوبة بدقة، مما يقلل من البيانات الزائدة أو الناقصة.",
      "paragraph3": "ظهرت أيضاً gRPC من Google كخيار عالي الأداء يعتمد HTTP/2 وProtocol Buffers، ويقدّم بثاً مدمجاً واستدعاء إجراءات عن بعد عبر لغات متعددة، مما يقلل زمن الاستجابة ويُحسن الأداء."
    },
    "literatureReview": {
      "title": "مراجعة الأدبيات",
      "paragraph1": "بحثت دراسات عديدة الأداء المقارن بين REST و GraphQL في سياق بوابات API، محللةً عمليات القراءة والكتابة. وُجد أن GraphQL يتفوّق في بيئات الحمل العالي عندما تكون الطلبات انتقائية، بينما يظل REST أفضل لنقل البيانات الشاملة.",
      "paragraph2": "أظهرت تجارب NodeJS على MongoDB فروقاً طفيفة في استعلامات بسيطة، لكن مع تزايد الحمل؛ استفاد GraphQL من قدرته على طلب البيانات الدقيقة، فيما تفوّق REST عند الحاجة إلى جلب مجموعات بيانات كاملة.",
      "paragraph3": "تسهم دراستنا بإضافة مقارنة شاملة بين REST و GraphQL و gRPC داخل بيئات خدمات مصغرة، مقدّمة توصيات عملية لاختيار البروتوكول الأمثل بحسب السيناريو."
    },
    "protocolsOverview": {
      "title": "نظرة عامة على بروتوكولات الاتصال",
      "introduction": "تحدد بروتوكولات API الأطر والمواصفات اللازمة لتبادل الرسائل بين التطبيقات والأنظمة الموزعة، شامِلةً تنسيق الطلبات والاستجابات وقواعد الحوكمة.",
      "table": {
        "protocol": "البروتوكول",
        "httpVersion": "إصدار HTTP",
        "dataFormat": "تنسيق البيانات",
        "keyFeatures": "الميزات الرئيسية",
        "rest": {
          "httpVersion": "HTTP/1.1",
          "dataFormat": "JSON، XML",
          "features": "بدون حالة، قابل للتخزين المؤقت، بسيط"
        },
        "graphql": {
          "httpVersion": "HTTP/1.1",
          "dataFormat": "JSON",
          "features": "لغة استعلام، مرونة في الاسترجاع"
        },
        "grpc": {
          "httpVersion": "HTTP/2",
          "dataFormat": "Protocol Buffers",
          "features": "بث، تعدد إرسال، نظام أنواع قوي"
        }
      },
      "rest": {
        "title": "A. REST",
        "description": "إطار معماري يستخدم HTTP/1.1 للتواصل بين العميل والخادم عبر نقاط نهاية محددة، ابتكره Roy Fielding عام 2000."
      },
      "graphql": {
        "title": "B. GraphQL",
        "description": "لغة استعلام طورتها Facebook تتيح للعميل طلب البيانات بدقة عبر استعلام واحد، مع نظام أنواع قوي وبث في الوقت الحقيقي."
      },
      "grpc": {
        "title": "C. gRPC",
        "description": "بروتوكول عالي الأداء من Google يعتمد HTTP/2 وProtocol Buffers، يدعم بث ثنائي الاتجاه وتعدد إرسال، ويعمل عبر لغات متعددة."
      }
    },
    "architecture": {
      "title": "البنية التجريبية والتنفيذ",
      "introduction": "استخدمنا خدمات مصغرة بـ Golang، مستندين إلى نظام SISTER التعليمي في إندونيسيا، حيث تدير موارد التعليم والبحوث وبيانات الكوادر.",
      "systemComponents": {
        "title": "مكونات النظام",
        "authService": {
          "title": "خدمة المصادقة",
          "description": "إدارة التوثيق والتفويض"
        },
        "lecturerService": {
          "title": "خدمة بيانات المدّرسين",
          "description": "استرجاع البيانات المسطحة (ملف المدرّس)"
        },
        "educationService": {
          "title": "خدمة البيانات التعليمية",
          "description": "استرجاع البيانات المتداخلة (الملف + الخلفية التعليمية)"
        }
      },
      "database": {
        "title": "إعداد قاعدة البيانات",
        "mysql": "MySQL: تخزين طويل الأمد",
        "redis": "Redis: تخزين مؤقت في الذاكرة",
        "dataVolume": "حجم البيانات: 2٬221 ملف مدرّس",
        "extendedData": "البيانات الموسّعة: 6٬197 ملف مع الخلفية"
      },
      "dataRetrieval": {
        "title": "عملية الاسترجاع",
        "primaryFetch": "جلب من Redis أولاً",
        "fallback": "الرجوع إلى MySQL عند الفشل",
        "cachePopulation": "تعبئة Redis عند الجلب من MySQL",
        "optimized": "محسّن لزمن تأخير منخفض"
      },
      "dataStructures": {
        "flatData": { "title": "بيانات مسطحة" },
        "nestedData": { "title": "بيانات متداخلة" }
      }
    },
    "performance": {
      "title": "تحليل الأداء والنتائج",
      "introduction": "قمنا بتقييم الأداء باستخدام Apache JMeter لقياس زمن الاستجابة واستخدام CPU تحت أحمال بيانات مسطحة ومتداخلة.",
      "concurrent": {
        "title": "A. الطلبات المتزامنة",
        "colorCoding": { "title": "تلوين البروتوكولات" },
        "responseTime": {
          "flatData": "زمن الاستجابة – مسطحة",
          "nestedData": "زمن الاستجابة – متداخلة"
        },
        "cpuUtilization": {
          "flatData": "استخدام CPU – مسطحة",
          "nestedData": "استخدام CPU – متداخلة"
        },
        "keyFindings": {
          "responseTime": {
            "title": "النتائج – زمن الاستجابة:",
            "simpleData": "مسطحة: gRPC (233–2606 ملليثانية)، REST (1113–4009 ملليثانية)، GraphQL (3852–21148 ملليثانية)",
            "complexData": "متداخلة: REST (5201–16646 ملليثانية)، gRPC (5667–14962 ملليثانية)، GraphQL (8510–29734 ملليثانية)"
          },
          "cpuUtilization": {
            "title": "النتائج – استخدام CPU:",
            "simpleData": "مسطحة: REST (10–48٪)، gRPC (10–36٪)، GraphQL (120–142٪)",
            "complexData": "متداخلة: gRPC (30–84٪)، REST (38–123٪)، GraphQL (100–177٪)"
          }
        }
      },
      "sustained": {
        "title": "B. الاختبار المستمر (5 دقائق)",
        "responseTime": {
          "flatData": "زمن الاستجابة المتسلسل – مسطحة",
          "nestedData": "زمن الاستجابة المتسلسل – متداخلة"
        },
        "cpuUtilization": { "flatData": "استخدام CPU المتسلسل – مسطحة" },
        "results": {
          "title": "نتائج الاختبارات:",
          "point1": "gRPC الأسرع باستمرار في 5 دقائق",
          "point2": "REST ثابت عبر أحجام مختلفة",
          "point3": "GraphQL الأعلى في استهلاك الموارد",
          "point4": "HTTP/2 لـ gRPC يساهم بتحسين مستمر"
        }
      },
      "charts": {
        "concurrentRequests": "طلبات متزامنة",
        "responseTimeMs": "زمن استجابة (ملليثانية)",
        "cpuUtilizationPercent": "استخدام CPU (%)",
        "requestsLabel": "{count} طلب"
      }
    },
    "findings": {
      "title": "النتائج والتوصيات",
      "paragraph1": "تعتمد الأنظمة الحديثة على الخدمات المصغرة لتوفير مرونة وقابلية للتوسع. يمثل اختيار البروتوكول عاملاً حاسماً في الأداء.",
      "paragraph2": "أظهر التحليل أن gRPC يتفوق في زمن الاستجابة، بينما REST يُعد الأكثر كفاءة في استخدام الموارد مقارنةً بـ gRPC و GraphQL.",
      "recommendations": {
        "title": "التوصيات:",
        "grpc": "للأنظمة عالية الأداء وزمن الاستجابة المنخفض",
        "rest": "للبيئات محدودة الموارد والعمليات البسيطة",
        "graphql": "للمتطلبات المعقدة رغم استهلاكه الأعلى"
      }
    },
    "support": {
      "title": "ادعم عملي",
      "subtitle": "هل وجدت هذا التحليل مفيداً؟",
      "description": "ساعدني على مواصلة إنشاء محتوى تقني ومساهمات مفتوحة المصدر مفيدة للمطورين.",
      "buyMeCoffee": "اشترِ لي قهوة",
      "connectLinkedIn": "تواصل عبر LinkedIn"
    },
    "references": {
      "title": "المراجع",
      "showMore": "عرض كل المراجع ({count})",
      "showLess": "إخفاء المراجع"
    },
    "footer": {
      "createdBy": "تم الإنشاء بواسطة"
    }
  },
  "atGlance": {
    "title": "نظرة سريعة",
    "executiveSummary": "ملخص تنفيذي",
    "content": "تقارن هذه الدراسة أداء ثلاثة بروتوكولات API—REST، GraphQL، gRPC—في بنية الخدمات المصغرة بناءً على زمن الاستجابة واستخدام CPU، مع أحمال من 100 إلى 500 طلب. تبين أن gRPC يتصدر زمن الاستجابة، يليه REST ثم GraphQL، ويستهلك GraphQL CPU أكثر من البقية."
  },
  "introduction": {
    "title": "مقدمة",
    "modernArchitecture": "بنية حديثة للبرمجيات",
    "modernContent": "تغيّر بنية الخدمات المصغرة الطريقة التي نطور بها التطبيقات بتقسيمها إلى خدمات صغيرة مستقلة لكل منها مسؤولية محددة، مما يحسّن التوسع وعزل الأخطاء."
  },
  "protocolIntroduction": {
    "title": "مقدمة لبروتوكولات API",
    "protocolLandscape": "مشهد البروتوكولات",
    "protocolContent": "تُعد REST و GraphQL و gRPC البروتوكولات الأكثر استخداماً في تواصل الخدمات المصغرة، لكل منها مميزاته وتنازلاته حسب المتطلبات.",
    "comparisonOverview": "نظرة عامة للمقارنة",
    "comparisonContent": "يعتمد REST على نقاط نهاية متعددة وقد يعاني من الإفراط/النقص في البيانات، بينما يقدّم GraphQL استعلاماً دقيقاً، ويستخدم gRPC HTTP/2 وProtocol Buffers لأداء أعلى."
  },
  "apiOverview": {
    "title": "نظرة عامة على API",
    "rest": {
      "title": "REST",
      "description": "إطار عمل يستخدم HTTP/1.1 للتواصل بين العميل والخادم عبر نقاط نهاية متعددة.",
      "keyFeatures": "الميزات الرئيسية:",
      "features": [
        "GET، POST، PUT، DELETE",
        "نقاط نهاية متعددة",
        "JSON/XML",
        "بدون حالة"
      ],
      "advantages": "المزايا:",
      "advantagesList": [
        "بسيط وفهمه واسع",
        "تخزين مؤقت ممتاز",
        "أدوات ناضجة",
        "ميزات HTTP أصلية"
      ]
    },
    "graphql": {
      "title": "GraphQL",
      "description": "لغة استعلام تسمح للعميل بتحديد البيانات المطلوبة عبر استعلام واحد، مطورة بواسطة Facebook.",
      "keyFeatures": "الميزات الرئيسية:",
      "features": [
        "نقطة نهاية واحدة",
        "تحديد بيانات العميل",
        "نظام أنواع قوي",
        "اشتراكات حية"
      ],
      "advantages": "المزايا:",
      "advantagesList": [
        "لا إفراط/نقص",
        "استعلامات مرنة",
        "أدوات قوية",
        "استكشاف المخطط"
      ]
    },
    "grpc": {
      "title": "gRPC",
      "description": "بروتوكول عالي الأداء من Google يعتمد HTTP/2 وProtocol Buffers لبث ثنائي الاتجاه وتعدد إرسال.",
      "keyFeatures": "الميزات الرئيسية:",
      "features": [
        "HTTP/2",
        "Protocol Buffers",
        "بث ثنائي",
        "غير معتمد على لغة"
      ],
      "advantages": "المزايا:",
      "advantagesList": [
        "أداء عالي",
        "تسلسل فعال",
        "نظام أنواع قوي",
        "دعم البث"
      ]
    }
  },
  "methodology": {
    "title": "المنهجية والبنية",
    "experimentalSetup": "إعداد التجربة",
    "setupContent": "أجرينا الاختبارات على ثلاث خدمات Golang في حاويات، مستندين إلى نظام تعليمي، مع Redis للتخزين المؤقت وMySQL للتخزين طويل الأمد.",
    "services": [
      "خدمات المصادقة",
      "بيانات المدرسين (مسطحة)",
      "بيانات المدرسين مع الخلفية (متداخلة)"
    ],
    "databaseConfig": "تكوين البيانات",
    "databaseContent": "يستخدم كل خدمة Redis وMySQL لاسترجاع بيانات مسطحة ومتداخلة.",
    "testingMethodology": "منهجية الاختبار",
    "testingDescription": "استخدمنا Apache JMeter لاختبارات الحمل المتزامن والمتسلسل، مع قياس زمن الاستجابة واستخدام CPU.",
    "testingScenarios": [
      "100–500 طلب",
      "بيانات مسطحة ومتداخلة",
      "زمن استجابة واستخدام CPU",
      "10 تكرارات لكل اختبار"
    ]
  },
  "performanceResults": {
    "title": "نتائج الأداء",
    "responseTime": {
      "title": "زمن الاستجابة",
      "flatData": {
        "title": "مسطحة",
        "description": "تحت الحمل المتزامن:",
        "grpc": { "label": "gRPC", "performance": "233.84–2606.59 ملليثانية", "range": "100–500" },
        "rest": { "label": "REST", "performance": "1113.33–4009.83 ملليثانية", "range": "100–500" },
        "graphql": { "label": "GraphQL", "performance": "3852.07–21148.14 ملليثانية", "range": "100–500" }
      },
      "nestedData": {
        "title": "متداخلة",
        "description": "",
        "rest": { "label": "REST", "performance": "5201.39–16646.55 ملليثانية", "range": "100–500" },
        "grpc": { "label": "gRPC", "performance": "5667.33–14962.61 ملليثانية", "range": "100–500" },
        "graphql": { "label": "GraphQL", "performance": "8510.84–29734.59 ملليثانية", "range": "100–500" }
      }
    },
    "cpuUtilization": {
      "title": "استخدام CPU",
      "flatData": {
        "title": "مسطحة",
        "description": "",
        "rest": { "label": "REST", "performance": "10.26–48.90٪", "range": "100–500" },
        "grpc": { "label": "gRPC", "performance": "10.95–36.11٪", "range": "100–500" },
        "graphql": { "label": "GraphQL", "performance": "120.09–142.15٪", "range": "" }
      },
      "nestedData": {
        "title": "متداخلة",
        "description": "",
        "rest": { "label": "REST", "performance": "38.23–123.01٪", "range": "100–500" },
        "grpc": { "label": "gRPC", "performance": "30.11–84.04٪", "range": "100–500" },
        "graphql": { "label": "GraphQL", "performance": "100+–177.41٪", "range": "" }
      }
    },
    "consecutiveRequest": {
      "title": "طلبات متسلسلة",
      "description": "",
      "scenarios": [
        "مسطحة (100): gRPC 79.90 ملليثانية، REST 152.56 ملليثانية، GraphQL 196.90 ملليثانية",
        "مسطحة (500): gRPC 67.75 ملليثانية، REST 149.68 ملليثانية، GraphQL 204.35 ملليثانية",
        "متداخلة (100): gRPC 437.03 ملليثانية، REST 510.47 ملليثانية، GraphQL 589.25 ملليثانية",
        "متداخلة (500): gRPC 748.22 ملليثانية، REST 798.41 ملليثانية، GraphQL 1035.46 ملليثانية"
      ],
      "conclusion": "يُظهر gRPC تفوقًا مستمرًا تحت الأحمال المتسلسلّة."
    }
  },
  "keyFindings": {
    "title": "النتائج الرئيسية",
    "performanceCharacteristics": {
      "title": "خصائص الأداء",
      "grpcAdvantages": {
        "title": "مزايا gRPC",
        "advantages": [
          "أسرع زمن استجابة",
          "مزايا HTTP/2 (تعدد الإرسال، بث)",
          "تسلسل فعال",
          "مثالي للتواصل الداخلي"
        ]
      },
      "restStrengths": {
        "title": "نقاط قوة REST",
        "strengths": [
          "أدنى استخدام CPU",
          "تخزين مؤقت HTTP ممتاز",
          "بسيط",
          "أدوات ناضجة"
        ]
      }
    },
    "graphqlConsiderations": {
      "title": "اعتبارات GraphQL",
      "description": "",
      "considerations": [
        "أوقات استجابة أعلى تحت الحمل",
        "استخدام CPU أعلى من 100٪ أحيانًا",
        "تكلفة تحليل الاستعلام",
        "تخزين مؤقت معقد"
      ],
      "conclusion": ""
    }
  },
  "recommendations": {
    "title": "التوصيات المعمارية",
    "protocolSelection": {
      "title": "متى تختار:",
      "grpc": {
        "title": "gRPC لـ:",
        "scenarios": [
          "التواصل الداخلي عالي الأداء",
          "زمن تأخير منخفض",
          "بث البيانات",
          "بيئات متعددة اللغات"
        ]
      },
      "rest": {
        "title": "REST لـ:",
        "scenarios": [
          "APIs عامة",
          "CRUD بسيط",
          "موارد محدودة",
          "تخزين مؤقت HTTP"
        ]
      },
      "graphql": {
        "title": "GraphQL لـ:",
        "scenarios": [
          "متطلبات بيانات معقدة",
          "تطبيقات محمولة",
          "بوابات API",
          "مرونة الاستعلام"
        ]
      }
    },
    "hybridArchitecture": {
      "title": "معمارية هجينة",
      "description": "استخدم بروتوكولات متعددة:",
      "approaches": [
        "gRPC للخدمة–لخدمة داخليًا",
        "REST للواجهات العامة",
        "GraphQL لتجميع البيانات"
      ]
    }
  },
  "conclusion": {
    "title": "الخلاصة",
    "description": "اختيار بروتوكول التواصل يؤثر بشكل كبير على الأداء. gRPC يتفوق في زمن الاستجابة، REST في كفاءة الموارد، وGraphQL في المرونة.",
    "keyTakeaways": {
      "title": "أهم النقاط:",
      "takeaways": [
        "gRPC أسرع دومًا",
        "REST كفؤ في استخدام CPU",
        "GraphQL مرن ولكن مكلف أداءً",
        "اختر البروتوكول وفق السيناريو"
      ]
    },
    "http2Benefits": "تسهم مزايا HTTP/2 في gRPC (تعدد الإرسال، التسلسل الفعال) في تحسين الأداء.",
    "futureConsiderations": "قد يتطلب التصميم الأمثل الاستفادة من عدة بروتوكولات معًا بدلًا من حل واحد."
  },
  "references": {
    "title": "المراجع",
    "showMore": "عرض المزيد ({count})",
    "showLess": "عرض أقل"
  }
}
